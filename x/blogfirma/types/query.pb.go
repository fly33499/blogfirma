// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blogfirma/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetMaploRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetMaploRequest) Reset()         { *m = QueryGetMaploRequest{} }
func (m *QueryGetMaploRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaploRequest) ProtoMessage()    {}
func (*QueryGetMaploRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{0}
}
func (m *QueryGetMaploRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaploRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaploRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaploRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaploRequest.Merge(m, src)
}
func (m *QueryGetMaploRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaploRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaploRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaploRequest proto.InternalMessageInfo

func (m *QueryGetMaploRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetMaploResponse struct {
	Maplo *Maplo `protobuf:"bytes,1,opt,name=Maplo,proto3" json:"Maplo,omitempty"`
}

func (m *QueryGetMaploResponse) Reset()         { *m = QueryGetMaploResponse{} }
func (m *QueryGetMaploResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetMaploResponse) ProtoMessage()    {}
func (*QueryGetMaploResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{1}
}
func (m *QueryGetMaploResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetMaploResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetMaploResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetMaploResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetMaploResponse.Merge(m, src)
}
func (m *QueryGetMaploResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetMaploResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetMaploResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetMaploResponse proto.InternalMessageInfo

func (m *QueryGetMaploResponse) GetMaplo() *Maplo {
	if m != nil {
		return m.Maplo
	}
	return nil
}

type QueryAllMaploRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMaploRequest) Reset()         { *m = QueryAllMaploRequest{} }
func (m *QueryAllMaploRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllMaploRequest) ProtoMessage()    {}
func (*QueryAllMaploRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{2}
}
func (m *QueryAllMaploRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMaploRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMaploRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMaploRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMaploRequest.Merge(m, src)
}
func (m *QueryAllMaploRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMaploRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMaploRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMaploRequest proto.InternalMessageInfo

func (m *QueryAllMaploRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllMaploResponse struct {
	Maplo      []*Maplo            `protobuf:"bytes,1,rep,name=Maplo,proto3" json:"Maplo,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllMaploResponse) Reset()         { *m = QueryAllMaploResponse{} }
func (m *QueryAllMaploResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllMaploResponse) ProtoMessage()    {}
func (*QueryAllMaploResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{3}
}
func (m *QueryAllMaploResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllMaploResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllMaploResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllMaploResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllMaploResponse.Merge(m, src)
}
func (m *QueryAllMaploResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllMaploResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllMaploResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllMaploResponse proto.InternalMessageInfo

func (m *QueryAllMaploResponse) GetMaplo() []*Maplo {
	if m != nil {
		return m.Maplo
	}
	return nil
}

func (m *QueryAllMaploResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetHelloRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetHelloRequest) Reset()         { *m = QueryGetHelloRequest{} }
func (m *QueryGetHelloRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetHelloRequest) ProtoMessage()    {}
func (*QueryGetHelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{4}
}
func (m *QueryGetHelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHelloRequest.Merge(m, src)
}
func (m *QueryGetHelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHelloRequest proto.InternalMessageInfo

func (m *QueryGetHelloRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetHelloResponse struct {
	Hello *Hello `protobuf:"bytes,1,opt,name=Hello,proto3" json:"Hello,omitempty"`
}

func (m *QueryGetHelloResponse) Reset()         { *m = QueryGetHelloResponse{} }
func (m *QueryGetHelloResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetHelloResponse) ProtoMessage()    {}
func (*QueryGetHelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{5}
}
func (m *QueryGetHelloResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetHelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetHelloResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetHelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetHelloResponse.Merge(m, src)
}
func (m *QueryGetHelloResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetHelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetHelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetHelloResponse proto.InternalMessageInfo

func (m *QueryGetHelloResponse) GetHello() *Hello {
	if m != nil {
		return m.Hello
	}
	return nil
}

type QueryAllHelloRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHelloRequest) Reset()         { *m = QueryAllHelloRequest{} }
func (m *QueryAllHelloRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllHelloRequest) ProtoMessage()    {}
func (*QueryAllHelloRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{6}
}
func (m *QueryAllHelloRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHelloRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHelloRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHelloRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHelloRequest.Merge(m, src)
}
func (m *QueryAllHelloRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHelloRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHelloRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHelloRequest proto.InternalMessageInfo

func (m *QueryAllHelloRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllHelloResponse struct {
	Hello      []*Hello            `protobuf:"bytes,1,rep,name=Hello,proto3" json:"Hello,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllHelloResponse) Reset()         { *m = QueryAllHelloResponse{} }
func (m *QueryAllHelloResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllHelloResponse) ProtoMessage()    {}
func (*QueryAllHelloResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dae7593eaee63a0a, []int{7}
}
func (m *QueryAllHelloResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllHelloResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllHelloResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllHelloResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllHelloResponse.Merge(m, src)
}
func (m *QueryAllHelloResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllHelloResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllHelloResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllHelloResponse proto.InternalMessageInfo

func (m *QueryAllHelloResponse) GetHello() []*Hello {
	if m != nil {
		return m.Hello
	}
	return nil
}

func (m *QueryAllHelloResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetMaploRequest)(nil), "fly33499.blogfirma.blogfirma.QueryGetMaploRequest")
	proto.RegisterType((*QueryGetMaploResponse)(nil), "fly33499.blogfirma.blogfirma.QueryGetMaploResponse")
	proto.RegisterType((*QueryAllMaploRequest)(nil), "fly33499.blogfirma.blogfirma.QueryAllMaploRequest")
	proto.RegisterType((*QueryAllMaploResponse)(nil), "fly33499.blogfirma.blogfirma.QueryAllMaploResponse")
	proto.RegisterType((*QueryGetHelloRequest)(nil), "fly33499.blogfirma.blogfirma.QueryGetHelloRequest")
	proto.RegisterType((*QueryGetHelloResponse)(nil), "fly33499.blogfirma.blogfirma.QueryGetHelloResponse")
	proto.RegisterType((*QueryAllHelloRequest)(nil), "fly33499.blogfirma.blogfirma.QueryAllHelloRequest")
	proto.RegisterType((*QueryAllHelloResponse)(nil), "fly33499.blogfirma.blogfirma.QueryAllHelloResponse")
}

func init() { proto.RegisterFile("blogfirma/query.proto", fileDescriptor_dae7593eaee63a0a) }

var fileDescriptor_dae7593eaee63a0a = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x94, 0xcf, 0x6b, 0x13, 0x41,
	0x14, 0xc7, 0x33, 0xa9, 0x11, 0x1d, 0xc1, 0xc3, 0xd0, 0x82, 0x84, 0xb2, 0xc8, 0x16, 0x6b, 0x69,
	0x75, 0xc6, 0x66, 0xbd, 0xe4, 0x58, 0x0f, 0x56, 0x0f, 0x82, 0xee, 0xd1, 0x83, 0x30, 0xdb, 0x4c,
	0xb7, 0x03, 0xb3, 0x3b, 0xdb, 0xcc, 0x44, 0x1a, 0x8a, 0x17, 0xff, 0x02, 0xc1, 0x9b, 0x5e, 0x44,
	0xf0, 0x7f, 0xf1, 0x58, 0xf0, 0xe2, 0x51, 0x12, 0xff, 0x10, 0xd9, 0x99, 0x89, 0xfb, 0xa3, 0x31,
	0xee, 0x82, 0xde, 0x36, 0x2f, 0xef, 0xfb, 0xde, 0xe7, 0x7d, 0xf7, 0xbd, 0x85, 0x1b, 0x91, 0x90,
	0xf1, 0x31, 0x1f, 0x27, 0x94, 0x9c, 0x4e, 0xd8, 0x78, 0x8a, 0xb3, 0xb1, 0xd4, 0x12, 0x6d, 0x1e,
	0x8b, 0x69, 0x10, 0x3c, 0x1c, 0x0e, 0xf1, 0xef, 0xff, 0x8b, 0xa7, 0xfe, 0x66, 0x2c, 0x65, 0x2c,
	0x18, 0xa1, 0x19, 0x27, 0x34, 0x4d, 0xa5, 0xa6, 0x9a, 0xcb, 0x54, 0x59, 0x6d, 0x7f, 0xf7, 0x48,
	0xaa, 0x44, 0x2a, 0x12, 0x51, 0xc5, 0x6c, 0x51, 0xf2, 0x7a, 0x3f, 0x62, 0x9a, 0xee, 0x93, 0x8c,
	0xc6, 0x3c, 0x35, 0xc9, 0x2e, 0xb7, 0xd4, 0x3e, 0xa1, 0x99, 0x90, 0x97, 0xc3, 0x27, 0x4c, 0x2c,
	0xc2, 0xfe, 0x3d, 0xb8, 0xfe, 0x22, 0xaf, 0x77, 0xc8, 0xf4, 0xb3, 0x3c, 0x3b, 0x64, 0xa7, 0x13,
	0xa6, 0x34, 0x5a, 0x87, 0x3d, 0x9e, 0x8e, 0xd8, 0xd9, 0x2d, 0x70, 0x1b, 0xec, 0x5c, 0x0f, 0xed,
	0x0f, 0x3f, 0x84, 0x1b, 0xb5, 0x6c, 0x95, 0xc9, 0x54, 0x31, 0x34, 0x84, 0x3d, 0x13, 0x30, 0xe9,
	0x37, 0x06, 0x5b, 0x78, 0xd5, 0xb0, 0xd8, 0x6a, 0xad, 0xc2, 0x7f, 0xe5, 0x08, 0x0e, 0x84, 0xa8,
	0x10, 0x3c, 0x86, 0xb0, 0x98, 0xcd, 0xd5, 0xdd, 0xc6, 0xd6, 0x08, 0x9c, 0x1b, 0x81, 0xad, 0xbb,
	0xce, 0x08, 0xfc, 0x9c, 0xc6, 0xcc, 0x69, 0xc3, 0x92, 0xd2, 0xff, 0x08, 0x1c, 0x74, 0xd1, 0xe0,
	0x32, 0xf4, 0x5a, 0x3b, 0x68, 0x74, 0x58, 0x81, 0xeb, 0x1a, 0xb8, 0xbb, 0x7f, 0x85, 0xb3, 0x7d,
	0x2b, 0x74, 0xdb, 0x85, 0xff, 0x4f, 0xf2, 0xd7, 0xb2, 0x98, 0xfe, 0x26, 0xec, 0xf2, 0x91, 0x99,
	0xfa, 0x4a, 0xd8, 0xe5, 0xa3, 0xb2, 0xf3, 0x2e, 0xaf, 0x18, 0xc2, 0x04, 0x9a, 0x39, 0x6f, 0xb5,
	0x56, 0x51, 0x76, 0xbe, 0xd2, 0xfb, 0x7f, 0x38, 0xff, 0x47, 0xe8, 0xb5, 0x76, 0xd0, 0xff, 0xcc,
	0xf9, 0xc1, 0x87, 0x1e, 0xec, 0x19, 0x3a, 0xf4, 0x05, 0xb8, 0x45, 0x40, 0x83, 0xd5, 0x20, 0xcb,
	0x2e, 0xa5, 0x1f, 0xb4, 0xd2, 0x58, 0x10, 0x3f, 0x78, 0xfb, 0xed, 0xe7, 0xfb, 0xee, 0x7d, 0xb4,
	0x47, 0x16, 0x62, 0x52, 0xdc, 0x67, 0xed, 0x80, 0xc9, 0xb9, 0x39, 0xbe, 0x37, 0xe8, 0x13, 0x80,
	0xd7, 0x4c, 0x99, 0x03, 0x21, 0x1a, 0xa1, 0xd6, 0x4e, 0xaa, 0x11, 0x6a, 0xfd, 0x4a, 0xfc, 0x3d,
	0x83, 0x7a, 0x07, 0x6d, 0x35, 0x40, 0x45, 0x9f, 0x81, 0x7b, 0xb3, 0x4d, 0xad, 0x2c, 0x2f, 0x5e,
	0x53, 0x2b, 0x2b, 0xbb, 0xe4, 0x3f, 0x30, 0x7c, 0xbb, 0x68, 0x67, 0x35, 0x9f, 0xf9, 0xe8, 0x91,
	0x73, 0x3e, 0xb2, 0x3e, 0x9a, 0x1a, 0x2d, 0x7c, 0x6c, 0xcd, 0x59, 0xdf, 0xf9, 0xa6, 0x3e, 0x1a,
	0xce, 0x47, 0x4f, 0xbf, 0xce, 0x3c, 0x70, 0x31, 0xf3, 0xc0, 0x8f, 0x99, 0x07, 0xde, 0xcd, 0xbd,
	0xce, 0xc5, 0xdc, 0xeb, 0x7c, 0x9f, 0x7b, 0x9d, 0x97, 0x24, 0xe6, 0xfa, 0x64, 0x12, 0xe1, 0x23,
	0x99, 0x2c, 0x2b, 0x74, 0x56, 0x7a, 0xd6, 0xd3, 0x8c, 0xa9, 0xe8, 0xaa, 0xf9, 0xd0, 0x07, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0x23, 0x71, 0x8a, 0x42, 0x97, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a maplo by index.
	Maplo(ctx context.Context, in *QueryGetMaploRequest, opts ...grpc.CallOption) (*QueryGetMaploResponse, error)
	// Queries a list of maplo items.
	MaploAll(ctx context.Context, in *QueryAllMaploRequest, opts ...grpc.CallOption) (*QueryAllMaploResponse, error)
	// Queries a hello by id.
	Hello(ctx context.Context, in *QueryGetHelloRequest, opts ...grpc.CallOption) (*QueryGetHelloResponse, error)
	// Queries a list of hello items.
	HelloAll(ctx context.Context, in *QueryAllHelloRequest, opts ...grpc.CallOption) (*QueryAllHelloResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Maplo(ctx context.Context, in *QueryGetMaploRequest, opts ...grpc.CallOption) (*QueryGetMaploResponse, error) {
	out := new(QueryGetMaploResponse)
	err := c.cc.Invoke(ctx, "/fly33499.blogfirma.blogfirma.Query/Maplo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MaploAll(ctx context.Context, in *QueryAllMaploRequest, opts ...grpc.CallOption) (*QueryAllMaploResponse, error) {
	out := new(QueryAllMaploResponse)
	err := c.cc.Invoke(ctx, "/fly33499.blogfirma.blogfirma.Query/MaploAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Hello(ctx context.Context, in *QueryGetHelloRequest, opts ...grpc.CallOption) (*QueryGetHelloResponse, error) {
	out := new(QueryGetHelloResponse)
	err := c.cc.Invoke(ctx, "/fly33499.blogfirma.blogfirma.Query/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HelloAll(ctx context.Context, in *QueryAllHelloRequest, opts ...grpc.CallOption) (*QueryAllHelloResponse, error) {
	out := new(QueryAllHelloResponse)
	err := c.cc.Invoke(ctx, "/fly33499.blogfirma.blogfirma.Query/HelloAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a maplo by index.
	Maplo(context.Context, *QueryGetMaploRequest) (*QueryGetMaploResponse, error)
	// Queries a list of maplo items.
	MaploAll(context.Context, *QueryAllMaploRequest) (*QueryAllMaploResponse, error)
	// Queries a hello by id.
	Hello(context.Context, *QueryGetHelloRequest) (*QueryGetHelloResponse, error)
	// Queries a list of hello items.
	HelloAll(context.Context, *QueryAllHelloRequest) (*QueryAllHelloResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Maplo(ctx context.Context, req *QueryGetMaploRequest) (*QueryGetMaploResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Maplo not implemented")
}
func (*UnimplementedQueryServer) MaploAll(ctx context.Context, req *QueryAllMaploRequest) (*QueryAllMaploResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaploAll not implemented")
}
func (*UnimplementedQueryServer) Hello(ctx context.Context, req *QueryGetHelloRequest) (*QueryGetHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Hello not implemented")
}
func (*UnimplementedQueryServer) HelloAll(ctx context.Context, req *QueryAllHelloRequest) (*QueryAllHelloResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HelloAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Maplo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetMaploRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Maplo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly33499.blogfirma.blogfirma.Query/Maplo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Maplo(ctx, req.(*QueryGetMaploRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MaploAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllMaploRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MaploAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly33499.blogfirma.blogfirma.Query/MaploAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MaploAll(ctx, req.(*QueryAllMaploRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly33499.blogfirma.blogfirma.Query/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Hello(ctx, req.(*QueryGetHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HelloAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllHelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HelloAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fly33499.blogfirma.blogfirma.Query/HelloAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HelloAll(ctx, req.(*QueryAllHelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fly33499.blogfirma.blogfirma.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Maplo",
			Handler:    _Query_Maplo_Handler,
		},
		{
			MethodName: "MaploAll",
			Handler:    _Query_MaploAll_Handler,
		},
		{
			MethodName: "Hello",
			Handler:    _Query_Hello_Handler,
		},
		{
			MethodName: "HelloAll",
			Handler:    _Query_HelloAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blogfirma/query.proto",
}

func (m *QueryGetMaploRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaploRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaploRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetMaploResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetMaploResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetMaploResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Maplo != nil {
		{
			size, err := m.Maplo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMaploRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMaploRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMaploRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllMaploResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllMaploResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllMaploResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Maplo) > 0 {
		for iNdEx := len(m.Maplo) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Maplo[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetHelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetHelloResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetHelloResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Hello != nil {
		{
			size, err := m.Hello.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHelloRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHelloRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHelloRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllHelloResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllHelloResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllHelloResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Hello) > 0 {
		for iNdEx := len(m.Hello) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Hello[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetMaploRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetMaploResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Maplo != nil {
		l = m.Maplo.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMaploRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllMaploResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Maplo) > 0 {
		for _, e := range m.Maplo {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetHelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetHelloResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Hello != nil {
		l = m.Hello.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHelloRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllHelloResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Hello) > 0 {
		for _, e := range m.Hello {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetMaploRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaploRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaploRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetMaploResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetMaploResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetMaploResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maplo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Maplo == nil {
				m.Maplo = &Maplo{}
			}
			if err := m.Maplo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMaploRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMaploRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMaploRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllMaploResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllMaploResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllMaploResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Maplo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Maplo = append(m.Maplo, &Maplo{})
			if err := m.Maplo[len(m.Maplo)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetHelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetHelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetHelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hello == nil {
				m.Hello = &Hello{}
			}
			if err := m.Hello.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHelloRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHelloRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHelloRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllHelloResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllHelloResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllHelloResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hello", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hello = append(m.Hello, &Hello{})
			if err := m.Hello[len(m.Hello)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
